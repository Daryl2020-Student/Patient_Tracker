name: .NET

on:
  push: #On a push to the master branch, initiate this workflow
    branches: 
      - master 
    paths-ignore: #Ignore markdown files & git files
      - '**/*.md' 
      - '**/*.git*'
  pull_request: #On a pull request to the master branch, initiate this workflow
    branches: 
      - master
  workflow_dispatch: #On a manual trigger, initiate this workflow

#Defining the environment variables to be used in the workflow
env:
  DOTNET_NOLOGO: true #Hides the .Net logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true #Skips the first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true #Opt out of telemetry

jobs: #Defining the jobs

  setup: #Setup job to install .Net workload on the latest Windows
    runs-on: ${{ matrix.os }} #Runs on the latest Windows
    strategy:
      matrix:
        os: [windows-latest] #Defining the OS
        dotnet-version: [7.0.x] #The .Net version

    steps:
      - uses: actions/checkout@v3 #Checkout the repo using GitHub action checkout "Checkout version 3"
      - name: Setup .NET #Setup .Net
        uses: actions/setup-dotnet@v3 #Using the GitHub action "Setup .Net version 3"
        with:
          dotnet-version: 7.0.x #The .Net version

      - name: Cache .NET packages #Caching the .Net NuGet packages
        uses: actions/cache@v2 #Using the GitHub action "Cache version 2"
        with:
          path: ~/.nuget/packages #Path to the .Net NuGet packages
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }} #Defining a key for caching
          #Restore-keys looks for variations of the key created so it doesn't have to be exact
          restore-keys: |
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages- 
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
            
  build-web-app: #Build job to build the web app
    needs: setup #Needs this to run
    name: Build Web App #Name of job
    runs-on: ${{ matrix.os }} #Runs on the latest Windows
    strategy: #Defining the strategy
      matrix: #Defining the matrix
        os: [windows-latest] #Defining the OS

    steps:
      - uses: actions/checkout@v3 #Using "Checkout version 3"
      - name: Cache .NET packages #Caching the .Net NuGet packages
        uses: actions/cache@v2 #Using the GitHub action Cache version 2
        with:
          path: ~/.nuget/packages #Path to the .Net NuGet packages
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }} #Defining a key for caching 
          restore-keys: |
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
     
      - name: Setup .NET #Setup .Net
        uses: actions/setup-dotnet@v3 #Using the GitHub action "Setup .Net version 3"
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Restore #Restore the .Net packages
        run: dotnet restore 
      - name: Build #Build .Net
        run: dotnet build --no-restore

  #Testing the SQLite DB
  test:
    needs: build-web-app #Needs this to run
    name: TestDB #Name of job
    runs-on: ${{ matrix.os }} #Runs on the latest Windows
    strategy: #Defining the strategy
      matrix: #Defining the matrix
        os: [windows-latest] #Defining the OS

    steps: #Defining the steps
      - uses: actions/checkout@v3 #Using the GitHub action "Checkout version 3"
      - name: Cache .NET packages #Caching the .Net NuGet packages
        uses: actions/cache@v2 #Using the GitHub action "Cache version 2"
        with: 
          path: ~/.nuget/packages #Path to the .Net NuGet packages
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }} #Defining a key for caching
          restore-keys: | #Restore-keys looks for variations of the key created so it doesn't have to be exact
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages- 
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
            
      - name: Setup .NET #Setup .Net
        uses: actions/setup-dotnet@v3 #Using the GitHub action "Setup .Net version 3"
        with:
          dotnet-version: ${{ matrix.dotnet-version }} #Defining the .Net version
      - name: Restore #Restore the .Net packages
        run: dotnet restore #Restore the .Net packages
      - name: Test #Test the .Net packages
        run: dotnet test 
        
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
        
  #Deloying the Web-App using Windows lastest release
  deploy:
    needs: [analyze, build-web-app, test] #Needs these to run
    if: ${{ needs.test.result == 'success' }} #If the test is successful
    name: Deploy App #Name of job
    runs-on: windows-latest #Runs on the latest Windows

    steps:
      - name: Deploy Web App #Deploy the web app
        run: echo "Deploy in progress" #Echo the message "Deploy in progress"

  
